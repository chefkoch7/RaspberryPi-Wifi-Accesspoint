### update your pi
sudo apt-get update && sudo apt-get upgrade

### install optional packages
sudo apt install -y vim net-tools wireless-tools

### install needed packages
sudo apt install -y iptables dhcpcd5 dnsmasq hostapd

### prepare config first to ignore wlan0 setup, static IP follows later
sudo vim /etc/dhcpcd.conf

### Put this above any interface lines that may be in the file:
denyinterfaces wlan0

### Now lets setup our interfaces eth0 with dhcp and wlan0 as wifi interface
sudo vim /etc/network/interfaces

# add this section
allow-hotplug eth0
iface eth0 inet dhcp

allow-hotplug wlan0  
iface wlan0 inet static  
    address 172.24.1.1
    netmask 255.255.255.0
    network 172.24.1.0
    broadcast 172.24.1.25
    
### restart dhcpcd with
sudo service dhcpcd restart

### and then reload the configuration for wlan0 with:
sudo ifdown wlan0 
sudo ifup wlan0

### configure hostapd.conf file 
vim /etc/hostapd/hostapd.conf

### example config
# This is the name of the WiFi interface we configured above
interface=wlan0

# Use the nl80211 driver with the brcmfmac driver
driver=nl80211

# This is the name of the network
ssid=Some-Accesspoint-Name

# Use the 2.4GHz band
hw_mode=g

# Use channel 6
channel=6

# Enable 802.11n
ieee80211n=1

# Enable WMM
wmm_enabled=1

# Enable 40MHz channels with 20ns guard interval
ht_capab=[HT40][SHORT-GI-20][DSSS_CCK-40]

# Accept all MAC addresses
macaddr_acl=0

# Use WPA authentication
auth_algs=1

# Require clients to know the network name
ignore_broadcast_ssid=0

# Use WPA2
wpa=2

# Use a pre-shared key
wpa_key_mgmt=WPA-PSK

# The network passphrase
wpa_passphrase=password_you_chose

# Use AES, instead of TKIP
rsn_pairwise=CCMP

### test config with:
sudo /usr/sbin/hostapd /etc/hostapd/hostapd.conf

### test schliessen stop hostapd
ctrl+c

### tell hostapd where to find its config file
sudo vim /etc/default/hostapd

Find the line #DAEMON_CONF=”” and replace it with DAEMON_CONF=”/etc/hostapd/hostapd.conf”

### Let’s get dnsmasq set up:
sudo mv /etc/dnsmasq.conf /etc/dnsmasq.conf.bak  
sudo vim /etc/dnsmasq.conf

### The file should look like this:
interface=wlan0      # Use interface wlan0  
listen-address=172.24.1.1 # Set our listening address
bind-interfaces      # Bind to the interface to make sure we aren't sending things elsewhere  
server=8.8.8.8       # Forward DNS requests to Google DNS  
domain-needed        # Don't forward short names  
bogus-priv           # Never forward addresses in the non-routed address spaces.  
dhcp-range=172.24.1.50,172.24.1.150,12h # Assign IP addresses between 172.24.1.50 and 172.24.1.150 with a 12 hour lease time

### Now, we have two interfaces active, and we have a DHCP client for our Pi and a DHCP server for our wireless guests. Now we need to forward traffic between the wifi and ethernet interfaces. We can make this happen immediately with a simple command to update /proc:
### get root permission with
sudo -i
echo 1 > /proc/sys/net/ipv4/ip_forward
cat /proc/sys/net/ipv4/ip_forward

### However, this change won’t stick between reboots. We need to make it permanent through sysctl:
vim /etc/sysctl.conf
..uncomment the line containing net.ipv4.ip_forward=1:

### iptables setup
### The forward isn’t quite enough to give our wifi guests Internet access (through our eth0 interface). We need iptables to help us do this.
iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE  
iptables -A FORWARD -i eth0 -o wlan0 \                                             
> -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPT

### Check out our rules:
sudo iptables -S
-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
-A FORWARD -i eth0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -i wlan0 -o eth0 -j ACCEPT

### Output our rules to a file:
iptables-save > /etc/iptables.ipv4.nat

### Apply these rules every time we boot the Pi by editing the /etc/rc.local file:
sudo vim /etc/rc.local

### Example
#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

# Print the IP address
_IP=$(hostname -I) || true
if [ "$_IP" ]; then
  printf "My IP address is %s\n" "$_IP"
fi

iptables-restore < /etc/iptables.ipv4.nat
exit 0

### Make the file executable:
sudo chmod 711 /etc/rc.local
ls -l /etc/rc.local

### unmasking hostapd service
sudo systemctl unmask hostapd

### restart and enable hostapd dnsmasq
sudo systemctl start hostapd dnsmasq
sudo systemctl enable hostapd dnsmasq
sudo systemctl status hostapd dnsmasq


### for py zero w with ethernet hat enable ethernet-hat 
sudo vim /boot/config.txt

### add following line at the end of the config.txt
dtoverlay=enc28j60












